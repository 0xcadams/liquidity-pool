/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface SpaceCoinICOInterface extends utils.Interface {
  functions: {
    "addInvestor(address)": FunctionFragment;
    "claimTokens()": FunctionFragment;
    "currentPhase()": FunctionFragment;
    "incrementPhase()": FunctionFragment;
    "invest()": FunctionFragment;
    "moveToLiquidityPool(uint256,address)": FunctionFragment;
    "removeInvestor(address)": FunctionFragment;
    "spaceCoin()": FunctionFragment;
    "togglePaused()": FunctionFragment;
    "toggleTaxEnabled()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addInvestor", values: [string]): string;
  encodeFunctionData(
    functionFragment: "claimTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentPhase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "incrementPhase",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "invest", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "moveToLiquidityPool",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeInvestor",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "spaceCoin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "togglePaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toggleTaxEnabled",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrementPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "invest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "moveToLiquidityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "spaceCoin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "togglePaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleTaxEnabled",
    data: BytesLike
  ): Result;

  events: {
    "InvestmentReceived(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "InvestmentReceived"): EventFragment;
}

export type InvestmentReceivedEvent = TypedEvent<
  [string, BigNumber],
  { contributor: string; amount: BigNumber }
>;

export type InvestmentReceivedEventFilter =
  TypedEventFilter<InvestmentReceivedEvent>;

export interface SpaceCoinICO extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SpaceCoinICOInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addInvestor(
      investor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentPhase(overrides?: CallOverrides): Promise<[number]>;

    incrementPhase(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    invest(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    moveToLiquidityPool(
      amountEthRequested: BigNumberish,
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeInvestor(
      investor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    spaceCoin(overrides?: CallOverrides): Promise<[string]>;

    togglePaused(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleTaxEnabled(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addInvestor(
    investor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimTokens(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentPhase(overrides?: CallOverrides): Promise<number>;

  incrementPhase(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  invest(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  moveToLiquidityPool(
    amountEthRequested: BigNumberish,
    router: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeInvestor(
    investor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  spaceCoin(overrides?: CallOverrides): Promise<string>;

  togglePaused(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleTaxEnabled(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addInvestor(investor: string, overrides?: CallOverrides): Promise<void>;

    claimTokens(overrides?: CallOverrides): Promise<void>;

    currentPhase(overrides?: CallOverrides): Promise<number>;

    incrementPhase(overrides?: CallOverrides): Promise<void>;

    invest(overrides?: CallOverrides): Promise<void>;

    moveToLiquidityPool(
      amountEthRequested: BigNumberish,
      router: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeInvestor(investor: string, overrides?: CallOverrides): Promise<void>;

    spaceCoin(overrides?: CallOverrides): Promise<string>;

    togglePaused(overrides?: CallOverrides): Promise<void>;

    toggleTaxEnabled(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "InvestmentReceived(address,uint256)"(
      contributor?: null,
      amount?: null
    ): InvestmentReceivedEventFilter;
    InvestmentReceived(
      contributor?: null,
      amount?: null
    ): InvestmentReceivedEventFilter;
  };

  estimateGas: {
    addInvestor(
      investor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentPhase(overrides?: CallOverrides): Promise<BigNumber>;

    incrementPhase(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    invest(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    moveToLiquidityPool(
      amountEthRequested: BigNumberish,
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeInvestor(
      investor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    spaceCoin(overrides?: CallOverrides): Promise<BigNumber>;

    togglePaused(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleTaxEnabled(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addInvestor(
      investor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentPhase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    incrementPhase(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    invest(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    moveToLiquidityPool(
      amountEthRequested: BigNumberish,
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeInvestor(
      investor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    spaceCoin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    togglePaused(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleTaxEnabled(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
